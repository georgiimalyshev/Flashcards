type: edu
custom_name: stage7
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.correct().also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.wrong(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.correct();
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.wrong("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (!result.isCorrect) {
                            return CheckResult.wrong(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.correct();
        }
    }

    fun dialogTest(vararg phrases: Phrase, consoleArgs: Array<String> = emptyArray()): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
                .addArguments(*consoleArgs)
    }
  learner_created: false
- name: test/common/FlashcardsStage7Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import flashcards.Main
    import java.io.File


    abstract class FlashcardsStage7Test : StageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("capitalsNew.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exportCards("capitalsNew.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    addCapital("France", "Paris"),
                    addCapital("Russia", "Moscow"),
                    askCards("France", "??", ""),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    addCapital("Japan", "Tokyo"),
                    askCards("Moscow", "Paris", "Tokyo"),
                    exit(),
                    exportArg(3),
                    consoleArgs = arrayOf("-import", "capitals.txt", "-export", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(3, *capitals()),
                    askCards("Moscow", "Paris", "Tokyo"),
                    removeCapital("Japan"),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt", "-import", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    exit(),
                    consoleArgs = arrayOf("-import", "capitals.txt")
            )

            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun importArg(count: Int, vararg cards: Pair<String, String>) =
                containing("$count cards have been loaded",
                        updateContext = { ctx ->
                            cards.forEach { (card, def) ->
                                ctx.addCard(card, def)
                                ctx.wrongCards.removeAll(listOf(card))
                            }
                        })

        fun exportArg(count: Int) = containing("$count cards have been saved")


        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.wrong("The log file $fileName does not exist.")
                        }
                        CheckResult.correct();
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.correct();
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx -> ctx.removeCard(card) })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.wrong("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.wrong("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.correct();
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.wrong("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnweredCapitals.clear()
                                    wrongAnweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage7Test;

    public class FlashcardsTest extends FlashcardsStage7Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |-
    package flashcards;

    public class Main {

        public static void main(String[] args) {
           CardBox cardBox = new CardBox();
        }
    }
  learner_created: true
- name: src/flashcards/CardBox.java
  visible: true
  text: "package flashcards;\n\n\nimport java.io.*;\nimport java.util.*;\n\nimport\
    \ static java.lang.System.out;\n\npublic class CardBox {\n\n    private HashMap<String,\
    \ String> hashMapDef;\n    private LinkedHashMap<String, String> cards;\n    private\
    \ HashMap<String, Integer> mistakes;\n    private ArrayList<String> logList =\
    \ new ArrayList<>();\n    private Scanner scanner;\n\n    public CardBox() {\n\
    \        hashMapDef = new HashMap<>();\n        cards = new LinkedHashMap<>();\n\
    \        scanner = new Scanner(System.in);\n        mistakes = new HashMap<>();\n\
    \n        process();\n    }\n\n    private void process() {\n        while (true)\
    \ {\n            addStringToLogAndPrint(\"Input the action (add, remove, import,\
    \ export, ask, exit, log, hardest card, reset stats):\");\n            String\
    \ input = getStringFromInputAndAddToLog();\n            switch (input) {\n\n \
    \               case \"add\": {\n                    addAction();\n          \
    \          break;\n                }\n                case \"remove\": {\n   \
    \                 removeAction();\n                    break;\n              \
    \  }\n                case \"ask\": {\n                    askAction();\n    \
    \                break;\n                }\n                case \"import\": {\n\
    \                    importAction();\n                    break;\n           \
    \     }\n                case \"export\": {\n                    exportAction();\n\
    \                    break;\n                }\n                case \"log\":\
    \ {\n                    logAction();\n                    break;\n          \
    \      }\n                case \"hardest card\": {\n                    hardestCardAction();\n\
    \                    break;\n                }\n                case \"reset stats\"\
    : {\n                    resetStatsAction();\n                    break;\n   \
    \             }\n                default: {\n                    addStringToLogAndPrint(\"\
    Bye bye!\");\n                    return;\n                }\n            }\n\
    \        }\n    }\n\n    private void addAction() {\n        addStringToLogAndPrint(\"\
    The card: \");\n        String term;\n        String definition;\n\n        term\
    \ = getStringFromInputAndAddToLog();\n        if (cards.containsKey(term)) {\n\
    \            addStringToLogAndPrint(\"The card \\\"\" + term + \"\\\" already\
    \ exists.\");\n            return;\n        }\n\n        addStringToLogAndPrint(\"\
    The definition of the card: \");\n\n        definition = getStringFromInputAndAddToLog();\n\
    \        if (hashMapDef.containsKey(definition)) {\n            addStringToLogAndPrint(\"\
    The definition \\\"\" + definition + \"\\\" already exists.\");\n            return;\n\
    \        }\n\n        addPair(term, definition, 0);\n        addStringToLogAndPrint(String.format(\"\
    The pair (\\\"%s\\\":\\\"%s\\\") has been added\", term, definition));\n    }\n\
    \n    private void removeAction() {\n        addStringToLogAndPrint(\"The card:\
    \ \");\n        String term;\n        String definition;\n        term = getStringFromInputAndAddToLog();\n\
    \        if (!cards.containsKey(term)) {\n            addStringToLogAndPrint(String.format(\"\
    Can't remove \\\"%s\\\": there is no such card.\", term));\n            return;\n\
    \        }\n        definition = cards.get(term);\n\n        cards.remove(term);\n\
    \        hashMapDef.remove(definition);\n        mistakes.remove(term);\n    \
    \    addStringToLogAndPrint(\"The card has been removed.\");\n    }\n\n    private\
    \ void askAction() {\n        addStringToLogAndPrint(\"How many times to ask?\"\
    );\n        int n = Integer.parseInt(getStringFromInputAndAddToLog());\n\n   \
    \     Random random = new Random();\n        Object[] array = cards.keySet().toArray();\n\
    \n        while (n-- > 0) {\n            String term = (String) array[random.nextInt(cards.size())];\n\
    \            String correctDefinition = cards.get(term);\n            addStringToLogAndPrint(String.format(\"\
    Print the definition of \\\"%s\\\":\", term));\n            String definition\
    \ = getStringFromInputAndAddToLog();\n            if (!hashMapDef.containsKey(definition))\
    \ {\n                addStringToLogAndPrint(String.format(\"Wrong answer. The\
    \ correct one is \\\"%s\\\".\", correctDefinition));\n                mistakes.put(term,\
    \ mistakes.getOrDefault(term, 0) + 1);\n                continue;\n          \
    \  }\n            String termFromInput = hashMapDef.get(definition);\n       \
    \     if (termFromInput.equals(term)) {\n                addStringToLogAndPrint(\"\
    Correct answer!\");\n            } else {\n                addStringToLogAndPrint(String.format(\"\
    Wrong answer. The correct one is \\\"%s\\\", you've just written the definition\
    \ of \\\"%s\\\"\", correctDefinition, termFromInput));\n                mistakes.put(term,\
    \ mistakes.getOrDefault(term, 0) + 1);\n            }\n        }\n    }\n\n  \
    \  private void importAction() {\n        addStringToLogAndPrint(\"File name:\"\
    );\n        String fileName = getStringFromInputAndAddToLog();\n        File file\
    \ = new File(fileName);\n        if (!file.exists()) {\n            addStringToLogAndPrint(\"\
    File not found.\");\n            return;\n        }\n        try (Scanner fileScanner\
    \ = new Scanner(file)) {\n            int loaded = 0;\n            while (fileScanner.hasNextLine())\
    \ {\n                String curLine = fileScanner.nextLine();\n              \
    \  String[] pair = curLine.split(\";\");\n                addPair(pair[0], pair[1],\
    \ Integer.parseInt(pair[2]));\n                loaded++;\n            }\n    \
    \        addStringToLogAndPrint(String.format(\"%d cards have been loaded\", loaded));\n\
    \        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n\
    \        }\n        ;\n    }\n\n    private void exportAction() {\n        addStringToLogAndPrint(\"\
    File name:\");\n        String fileName = getStringFromInputAndAddToLog();\n \
    \       try {\n            FileWriter writer = new FileWriter(fileName);\n   \
    \         for (Map.Entry<String, String> elem : cards.entrySet()) {\n        \
    \        writer.write(elem.getKey() + \";\" + elem.getValue() + \";\" + mistakes.getOrDefault(elem.getKey(),\
    \ 0) + \"\\n\");\n            }\n            writer.close();\n            addStringToLogAndPrint(String.format(\"\
    %d cards have been saved.\", cards.size()));\n\n        } catch (IOException e)\
    \ {\n            e.printStackTrace();\n        }\n    }\n\n    private void logAction()\
    \ {\n        addStringToLogAndPrint(\"File name:\");\n        String fileName\
    \ = getStringFromInputAndAddToLog();\n        try {\n            FileWriter writer\
    \ = new FileWriter(fileName);\n            for (String str :\n               \
    \     logList) {\n                writer.write(str + \"\\n\");\n            }\n\
    \n            writer.close();\n            addStringToLogAndPrint(\"The log has\
    \ been saved.\");\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n\
    \        }\n\n        \n    }\n\n    private void hardestCardAction() {\n    \
    \    if (mistakes.isEmpty()) {\n            addStringToLogAndPrint(\"There are\
    \ no cards with errors.\");\n            return;\n        }\n        String isAre;\n\
    \        String themIt;\n        ArrayList<String> hardCards = new ArrayList<>();\n\
    \        String strHardCards = \"\";\n        int maxMistakes = mistakes.values().stream().max(Integer::compare).get();\n\
    \        for (String str : mistakes.keySet()) {\n            if (mistakes.get(str)\
    \ == maxMistakes) {\n                hardCards.add(str);\n            }\n    \
    \    }\n        strHardCards = hardCards.toString()\n                .replaceAll(\"\
    \\\\[\", \"\\\"\")\n                .replaceAll(\"\\\\]\", \"\\\"\")\n       \
    \         .replaceAll(\", \", \"\\\", \\\"\");\n        if (hardCards.size() >\
    \ 1) {\n            isAre = \"cards are\";\n            themIt = \"them\";\n \
    \       } else {\n            isAre = \"card is\";\n            themIt = \"it\"\
    ;\n        }\n\n\n        addStringToLogAndPrint(String.format(\"The hardest %s\
    \ %s. You have %d errors answering %s.\", isAre, strHardCards, maxMistakes, themIt));\n\
    \    }\n\n    private void resetStatsAction() {\n        mistakes.clear();\n \
    \       addStringToLogAndPrint(\"Card statistics has been reset.\");\n    }\n\n\
    \    private void addPair(String term, String definition, int mistakesNum) {\n\
    \        if (hashMapDef.containsKey(cards.get(term))) {\n            hashMapDef.remove(cards.get(term));\n\
    \        }\n\n        cards.put(term, definition);\n        hashMapDef.put(definition,\
    \ term);\n        if (mistakesNum != 0) {\n            mistakes.put(term, mistakesNum);\n\
    \        }\n    }\n\n    private void addStringToLogAndPrint(String str) {\n \
    \       out.println(str);\n        logList.add(str);\n    }\n\n    private String\
    \ getStringFromInputAndAddToLog() {\n        String str = scanner.nextLine();\n\
    \        logList.add(str);\n        return str;\n    }\n\n}\n"
  learner_created: true
- name: capitalsNew.txt
  visible: true
  learner_created: true
- name: capitals.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/238/implement
status: Solved
record: -1
